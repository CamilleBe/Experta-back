// ================================================
// INDEX DES MOD√àLES SEQUELIZE
// ================================================

const { sequelize, testConnection, syncDatabase } = require('../config/database');

// Import des mod√®les
const User = require('./User');
const Document = require('./Document');
const Projet = require('./Projet');
const Mission = require('./Mission');

// ================================================
// ASSOCIATIONS ENTRE MOD√àLES
// ================================================

// Associations User <-> Document
User.hasMany(Document, { 
  foreignKey: 'userId', 
  as: 'documents',
  onDelete: 'CASCADE'
});

Document.belongsTo(User, { 
  foreignKey: 'userId', 
  as: 'user'
});

// Associations Document <-> Projet
Document.belongsTo(Projet, {
  foreignKey: 'projetId',
  as: 'projet'
});

Projet.hasMany(Document, {
  foreignKey: 'projetId',
  as: 'documents',
  onDelete: 'CASCADE'
});



// Associations User <-> Projet (en tant que client)
User.hasMany(Projet, { 
  foreignKey: 'clientId', 
  as: 'projetsClient',
  onDelete: 'CASCADE'
});

Projet.belongsTo(User, { 
  foreignKey: 'clientId', 
  as: 'client'
});

// Associations User <-> Projet (en tant qu'AMO)
User.hasMany(Projet, { 
  foreignKey: 'amoId', 
  as: 'projetsAMO',
  onDelete: 'SET NULL'
});

Projet.belongsTo(User, { 
  foreignKey: 'amoId', 
  as: 'amo'
});

// Associations Projet <-> Mission
Projet.hasMany(Mission, { 
  foreignKey: 'projectId', 
  as: 'missions',
  onDelete: 'CASCADE'
});

Mission.belongsTo(Projet, { 
  foreignKey: 'projectId', 
  as: 'projet'
});

console.log('üîó Associations entre mod√®les configur√©es');

// ================================================
// FONCTION D'INITIALISATION DE LA BASE DE DONN√âES
// ================================================

const initializeDatabase = async (force = false) => {
  try {
    console.log('üöÄ Initialisation de la base de donn√©es...');
    
    // 1. Test de la connexion
    const connected = await testConnection();
    if (!connected) {
      throw new Error('Impossible de se connecter √† la base de donn√©es');
    }
    
    console.log('üìã Mod√®les charg√©s:', {
      User: !!User,
      Document: !!Document,
      Projet: !!Projet,
      Mission: !!Mission
    });
    
    // 2. Synchronisation des mod√®les
    console.log(`üîÑ Synchronisation avec force=${force}, alter=${!force}`);
    await syncDatabase({ 
      force, // true = recr√©e toutes les tables (‚ö†Ô∏è perte de donn√©es)
      alter: !force // true = met √† jour la structure sans perdre les donn√©es
    });
    
    // 3. V√©rifier que la table ClientDocument existe
    console.log('üîç V√©rification table documents...');
    try {
      const tableExists = await sequelize.getQueryInterface().showAllTables();
      console.log('üìã Tables existantes:', tableExists);
      
      if (tableExists.includes('documents')) {
        console.log('‚úÖ Table documents trouv√©e');
        const tableStructure = await sequelize.getQueryInterface().describeTable('documents');
        console.log('üìã Structure table documents:', Object.keys(tableStructure));
      } else {
        console.log('‚ùå Table documents NON trouv√©e !');
      }
    } catch (tableError) {
      console.error('‚ùå Erreur v√©rification table:', tableError.message);
    }
    
    // 3. Cr√©ation de donn√©es par d√©faut si n√©cessaire
    if (force) {
      await createDefaultData();
    }
    
    console.log('‚úÖ Base de donn√©es initialis√©e avec succ√®s');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:');
    console.error('üìã D√©tails:', error.message);
    throw error;
  }
};

// ================================================
// CR√âATION DE DONN√âES PAR D√âFAUT
// ================================================

const createDefaultData = async () => {
  try {
    console.log('üìù Cr√©ation des donn√©es par d√©faut...');
    
    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await User.findOne({ where: { role: 'admin' } });
    
    if (!existingAdmin) {
      // Cr√©er un utilisateur admin par d√©faut
      await User.create({
        firstName: 'Admin',
        lastName: 'System',
        email: 'admin@experta.com',
        password: 'Admin123!', // Sera hash√© automatiquement par le hook
        role: 'admin',
        telephone: '+33 1 23 45 67 89'
      });
      
      console.log('üëë Utilisateur admin cr√©√©: admin@experta.com / Admin123!');
    }
    
    // Cr√©er un utilisateur de test
    const existingTestUser = await User.findOne({ where: { email: 'test@experta.com' } });
    if (!existingTestUser) {
      await User.create({
        firstName: 'Test',
        lastName: 'User',
        email: 'test@experta.com',
        password: 'Test123!',
        role: 'client',
        telephone: '+33 6 12 34 56 78'
      });
      
      console.log('üë§ Utilisateur test cr√©√©: test@experta.com / Test123!');
    }
    
    // Cr√©er un AMO d'exemple
    const existingAMO = await User.findOne({ where: { email: 'amo@experta.com' } });
    if (!existingAMO) {
      await User.create({
        firstName: 'Marie',
        lastName: 'Architecture',
        email: 'amo@experta.com',
        password: 'AMO123!',
        role: 'AMO',
        telephone: '+33 1 98 76 54 32',
        zoneIntervention: ['75', '92', '93', '94'],
        tagsMetiers: ['architecture', 'ma√Ætrise d\'oeuvre', 'r√©novation'],
        nomEntreprise: 'Architecture & Conseil SARL',
        noteFiabilite: 4.5
      });
      
      console.log('üèóÔ∏è AMO d\'exemple cr√©√©: amo@experta.com / AMO123!');
    }
    
    // Cr√©er un partenaire d'exemple
    const existingPartner = await User.findOne({ where: { email: 'partenaire@experta.com' } });
    if (!existingPartner) {
      await User.create({
        firstName: 'Jean',
        lastName: 'Renovation',
        email: 'partenaire@experta.com',
        password: 'Partner123!',
        role: 'partenaire',
        telephone: '+33 6 87 65 43 21',
        zoneIntervention: ['75', '77', '78'],
        tagsMetiers: ['plomberie', '√©lectricit√©', 'chauffage'],
        nomEntreprise: 'R√©novation Pro SAS',
        noteFiabilite: 4.2
      });
      
      console.log('üîß Partenaire d\'exemple cr√©√©: partenaire@experta.com / Partner123!');
    }
    
    console.log('‚úÖ Donn√©es par d√©faut cr√©√©es');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es par d√©faut:', error.message);
    throw error;
  }
};

// ================================================
// EXPORT DE TOUS LES MOD√àLES ET FONCTIONS
// ================================================

module.exports = {
  // Configuration Sequelize
  sequelize,
  
  // Mod√®les
  User,
  Document,
  Projet,
  Mission,
  
  // Fonctions utilitaires
  testConnection,
  syncDatabase,
  initializeDatabase,
  createDefaultData
}; 