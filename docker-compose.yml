# ================================================
# DOCKER COMPOSE - ORCHESTRATION MULTI-CONTENEURS
# ================================================

# Version du format docker-compose (3.8 = fonctionnalités récentes)
version: '3.8'

# ================================================
# DÉFINITION DES SERVICES
# ================================================

services:
  
  # ================================================
  # SERVICE APPLICATION NODE.JS
  # ================================================
  app:
    # Nom du conteneur (plus lisible que l'ID auto-généré)
    container_name: experta-backend
    
    # Build depuis le Dockerfile local
    build: 
      context: .
      dockerfile: Dockerfile
    
    # Redémarrage automatique sauf arrêt manuel
    restart: unless-stopped
    
    # Mappage des ports : HOST:CONTAINER
    ports:
      - "3000:3000"
    
    # Variables d'environnement pour Docker
    environment:
      - NODE_ENV=development
      - PORT=3000
      # Connexion à la base de données MySQL
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=experta_db
      - DB_USER=experta_user
      - DB_PASSWORD=secure_password_123
      - JWT_SECRET=your-super-secret-jwt-key-for-production
    
    # Dépendances : attendre que MySQL soit prêt
    depends_on:
      mysql:
        condition: service_healthy
    
    # Réseaux personnalisés
    networks:
      - app-network
    
    # Volumes pour la persistance des logs (optionnel)
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src  # Synchronise le dossier src
      - ./server.js:/app/server.js

  # ================================================
  # SERVICE BASE DE DONNÉES MYSQL
  # ================================================
  mysql:
    # Image officielle MySQL
    image: mysql:8.0
    
    container_name: experta-mysql
    restart: unless-stopped
    
    # Variables d'environnement MySQL
    environment:
      MYSQL_ROOT_PASSWORD: root_password_123
      MYSQL_DATABASE: experta_db
      MYSQL_USER: experta_user
      MYSQL_PASSWORD: secure_password_123
    
    # Mappage des ports (optionnel pour debug)
    ports:
      - "3306:3306"
    
    # Volume pour persister les données
    volumes:
      - mysql_data:/var/lib/mysql
    
    # Health check pour MySQL
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s
    
    networks:
      - app-network

  # ================================================
  # SERVICE ADMINER (Interface web pour MySQL)
  # ================================================
  adminer:
    image: adminer:latest
    container_name: experta-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    networks:
      - app-network

  # ================================================
  # SERVICE PHPMYADMIN (Interface web alternative)
  # ================================================
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: experta-phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: experta_user
      PMA_PASSWORD: secure_password_123
      MYSQL_ROOT_PASSWORD: root
    depends_on:
      - mysql
    networks:
      - app-network

# ================================================
# DÉFINITION DES VOLUMES PERSISTANTS
# ================================================
volumes:
  # Volume pour les données MySQL
  mysql_data:
    driver: local

# ================================================
# DÉFINITION DES RÉSEAUX
# ================================================
networks:
  # Réseau isolé pour notre application
  app-network:
    driver: bridge 